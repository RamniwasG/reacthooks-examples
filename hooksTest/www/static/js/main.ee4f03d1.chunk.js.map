{"version":3,"sources":["comps/SimpleHooks.js","comps/HooksWithSingleState.js","comps/HooksWithMultipleState.js","Welcome.js","App.js","serviceWorker.js","index.js"],"names":["SimpleHooks","props","_useState","useState","_useState2","Object","slicedToArray","todoName","setTodoName","react_default","a","createElement","Fragment","title","className","htmlFor","type","value","onChange","event","target","HooksWithSingleState","inputState","todoList","todoState","setTodoState","onClick","concat","length","map","item","index","key","HooksWithMultipleState","_useState3","_useState4","todoEmail","setTodoEmail","_useState5","_useState6","setTodoList","name","email","Welcome","selectedIndex","setSelectedIndex","titleList","style","backgroundColor","e","preventDefault","onTitleClick","comps_SimpleHooks","comps_HooksWithMultipleState","comps_HooksWithSingleState","App","src_Welcome","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee4f03d1.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst SimpleHooks = props  => {\n    \n    const [todoName, setTodoName] = useState('')\n    \n    const onInputChange = (event) => {\n        setTodoName(event.target.value)\n    }\n    \n    return (\n        <React.Fragment>\n            <h4>{props.title}</h4>\n            <div className=\"row\">\n                <div className=\"col-sm-6\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Enter Your Name:</label>\n                        <input className=\"form-control\" type=\"text\" \n                            value={todoName} onChange={onInputChange} />\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default SimpleHooks","import React, { useState } from 'react'\n\nconst HooksWithSingleState = props  => {\n\n    const [todoState, setTodoState] = useState({inputState: '', todoList: []})\n    \n    const onInputChange = (event) => {\n        setTodoState({\n            inputState :event.target.value, \n            todoList: todoState.todoList \n        })\n    }\n\n    const onAddClickButtonHandler = () => {\n        setTodoState({\n            inputState: todoState.inputState,\n            todoList: todoState.todoList.concat(todoState.inputState)\n        })\n    }\n\n    return (\n        <React.Fragment>\n            <h4>{props.title}</h4>\n            <div className=\"row\">\n                <div className=\"col-sm-6\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Enter Your Name:</label>\n                        <input className=\"form-control\" type=\"text\" \n                            value={todoState.inputState} onChange={onInputChange} />\n                    </div>\n                    <input className=\"btn btn-success\" onClick={onAddClickButtonHandler} type=\"submit\" />\n                </div>\n                <div className=\"col-sm-6\">\n                <label htmlFor=\"name\">Item List:</label>\n                    <ul className=\"list-group\">\n                        {   todoState.todoList.length === 0 &&\n                            <li className=\"list-group-item\">No Item Available</li>\n                        }\n                        {   todoState.todoList.map((item, index) => {\n                            return (\n                                <li key={index} className=\"list-group-item\">\n                                    <h3>{item}</h3>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default HooksWithSingleState","import React, { useState } from 'react'\n\nconst HooksWithMultipleState = props  => {\n    \n    const [todoName, setTodoName] = useState('')\n    const [todoEmail, setTodoEmail] = useState('')\n    const [todoList, setTodoList] = useState([])\n    \n    const onInputChange = (event) => {\n        setTodoName(event.target.value)\n    }\n    const onEmailChange = (event) => {\n        setTodoEmail(event.target.value)\n    }\n\n    const onAddClickButtonHandler = () => {\n        setTodoList(todoList.concat({name: todoName, email: todoEmail}))\n        setTodoName('')\n        setTodoEmail('')\n    }\n\n    return (\n        <React.Fragment>\n            <h4>{props.title}</h4>\n            <div className=\"row\">\n                <div className=\"col-sm-6\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Enter Your Name:</label>\n                        <input className=\"form-control\" type=\"text\" \n                            value={todoName} onChange={onInputChange} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Enter Your Email:</label>\n                        <input className=\"form-control\" type=\"text\" \n                            value={todoEmail} onChange={onEmailChange} />\n                    </div>\n                    <input className=\"btn btn-success\" onClick={onAddClickButtonHandler} type=\"submit\" />\n                </div>\n                <div className=\"col-sm-6\">\n                <label htmlFor=\"name\">Item List:</label>\n                    <ul className=\"list-group\">\n                        {   todoList.length === 0 &&\n                            <li className=\"list-group-item\">No Item Available</li>\n                        }\n                        {   todoList.map((item, index) => {\n                            return (\n                                <li key={index} className=\"list-group-item\">\n                                    <h3>{item.name}</h3>\n                                    <p>{item.email}</p>\n                                </li>\n                            )\n                        })}\n                    </ul>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default HooksWithMultipleState","import React, { useState } from 'react'\nimport SimpleHooks from './comps/SimpleHooks';\nimport HooksWithSingleState from './comps/HooksWithSingleState';\nimport HooksWithMultipleState from './comps/HooksWithMultipleState';\n\nconst Welcome = props  => {\n\n    const [selectedIndex, setSelectedIndex] = useState(0)\n\n    const titleList = [ \n        \"Simple Hooks\",\n        \"Hooks with Multiple State\",\n        \"Hooks with Single State\"\n    ]\n\n    const onTitleClick = (e, index) => {\n        e.preventDefault()\n        setSelectedIndex(index)\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"container-fluid\">\n                <div className=\"jumbotron\">\n                    <h2 className=\"text-center\">Surfing with Hooks</h2>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                        <label htmlFor=\"name\">Title List:</label>\n                        <ul className=\"list-group\">\n                            {   titleList.length === 0 &&\n                                <li className=\"list-group-item\">No Title Available</li>\n                            }\n                            {   titleList.map((item, index) => {\n                                return (\n                                    <li key={index} style={{backgroundColor: index === selectedIndex ? 'lightgray' : ''}} \n                                        className=\"list-group-item\" onClick={e=>onTitleClick(e,index)}>\n                                        {item}\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    </div>\n                    <div className=\"col-sm-9\">\n                        {selectedIndex === 0 && <SimpleHooks title={titleList[selectedIndex]}/> }\n                        {selectedIndex === 1 && <HooksWithMultipleState title={titleList[selectedIndex]}/> }\n                        {selectedIndex === 2 && <HooksWithSingleState title={titleList[selectedIndex]}/> }\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Welcome","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Welcome from './Welcome';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Welcome />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}